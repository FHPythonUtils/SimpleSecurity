[tool.poetry]
name = "simplesecurity"
version = "2023.1.1"
license = "mit"
description = "Combine multiple popular python security tools and generate reports or output into different formats"
authors = ["FredHappyface"]
classifiers = [
	"Environment :: Console",
	"Environment :: MacOS X",
	"Environment :: Win32 (MS Windows)",
	"Development Status :: 5 - Production/Stable",
	"Intended Audience :: Developers",
	"Intended Audience :: Education",
	"Natural Language :: English",
	"Operating System :: OS Independent",
	"Programming Language :: Python :: Implementation :: CPython",
	"Topic :: Security",
	"Topic :: Software Development :: Libraries :: Python Modules",
	"Topic :: Utilities"
]
homepage = "https://github.com/FHPythonUtils/SimpleSecurity"
repository = "https://github.com/FHPythonUtils/SimpleSecurity"
documentation = "https://github.com/FHPythonUtils/SimpleSecurity/blob/master/README.md"
readme = "README.md"

[tool.poetry.scripts]
simplesecurity = 'simplesecurity:cli'

[tool.poetry.dependencies]
python = "^3.8"
poetry = "^1.1.10"
black = "^22.6.0"
flake8 = "^4.0.1"
flake8-bandit = "^3.0.0"
flake8-json = "^21.7.0"
isort = "^5.10.1"
mypy = "0.*"
bandit = "^1.7.0"
safety = "^2.2.3"
dodgy = "<2,>=0.2.1"
dlint = "<2,>=0.11.0"
semgrep = "^1.2.0"
sphinx = "^5.3.0"
docutils = "0.17"
sphinx-autodoc-typehints = "^1.19.5"
sphinx-rtd-theme = "1.1.1"
sphinx-mdinclude = "^0.5.3"
types-requests = "^2.28.11.13"
docformatter = {extras = ["tomli"], version = "^1.5.1"}
ruff = "^0.0.254"

[tool.poetry.extras]
docs= ['sphinx', 'docutils', 'sphinx-autodoc-typehints', 'sphinx-rtd-theme', 'sphinx_mdinclude']
scanners = ['flake8', 'flake8-bandit', 'flake8-json', 'mypy', 'isort', 'safety', 'bandit', 'dlint', 'semgrep']

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pylint.basic]
argument-naming-style = "camelCase"
attr-naming-style = "camelCase"
function-naming-style = "camelCase"
method-naming-style = "camelCase"
variable-naming-style = "camelCase"

[tool.pylint.format]
indent-string = "\t"

[tool.pylint.master]
ignore-patterns = "test_.*?py"

[tool.pylint.messages_control]
enable = ["F", "E", "W", "R", "C"]
disable = [
	"pointless-string-statement",
	"superfluous-parens",
	"bad-continuation"
]

[tool.black]
line-length = 79
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | tests/.*/setup.py
)/
'''

[tool.isort]
profile = "black"
indent = "Tab"

[tool.mypy]
show_error_context = true
show_column_numbers = true
#pretty = true
error_summary = true
show_absolute_path = true
incremental = false

[flake8]
max-line-length = 79

[tool.docformatter]
recursive = true
wrap-summaries = 79
blank = true

## adding Ruff configuration, ruff can replace a host of linters.

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F"]
ignore = []

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 79

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10